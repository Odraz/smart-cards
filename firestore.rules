
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Card Sets collection
    match /cardSets/{setId} {
      // Helper function to check if the authenticated user owns the document
      function userOwnsDocument() {
        return request.auth.uid == resource.data.userId;
      }
      // Helper function to check if the authenticated user is creating a document for themselves
      function userIsCreatingOwnDocument() {
        return request.auth.uid == request.resource.data.userId;
      }
      // Helper function to ensure the userId field is not being changed during an update
      function ownerIsNotChanging() {
        return resource.data.userId == request.resource.data.userId;
      }

      // Allow read if the user is authenticated and owns the document
      allow read: if request.auth != null && userOwnsDocument();

      // Allow create if the user is authenticated and is creating a document for themselves
      allow create: if request.auth != null && userIsCreatingOwnDocument();

      // Allow update if the user is authenticated, owns the document,
      // the new data still lists them as the owner, and they are not changing the owner.
      allow update: if request.auth != null && userOwnsDocument() && userIsCreatingOwnDocument() && ownerIsNotChanging();

      // Allow delete if the user is authenticated and owns the document
      allow delete: if request.auth != null && userOwnsDocument();
    }

    // Users collection (for API keys or other user-specific settings)
    match /users/{userId} {
      // Allow read and write (create, update, delete) if the authenticated user's ID matches the document ID
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
